/*!
 * @mainpage Тестовое задание для ООО «Интеллектуальные Логистические Системы»
 *
 *
 *  ### Предлагалось решить следующие задачи:
 *
 *  #### Задание №1:
 *  Есть набор машин с двумя характеристиками: вместимость по весу и вместимость по объему.
 *
 *  Расставьте машины в наборе в порядке убывания (приоритет у первой характеристики).
 *
 *  #### Задание №2:
 *  Есть ОДИН набор с двумя разновидностями машин, у одних есть две характеристики: вместимость
 *  по весу и вместимость по объему, а у других только вместимость по весу (нет ограничения по объему).
 *  Есть груз с заданным весом и объемом.
 *
 *  Удалите из набора те машины, в которые не влезет груз, используя в решении полиморфизм.
 *
 *  #### Задание №3:
 *  Есть набор целых чисел.
 *
 *  Напишите функцию увеличения всех чисел набора на единицу без использования циклов.
 *
 *  #### Задание №4:
 *  Есть набор целых чисел, набор машин (с двумя параметрами: вместимость по весу и объему),
 *  набор грузов (с двумя параметрами: вес и объем).
 *
 *  Напишите ОДНУ шаблонную функцию увеличения всех чисел набора или всех параметров всех объектов
 *  набора на единицу.
 *
 *  #### Задание №5:
 *  Есть класс, определяющий машину (с двумя параметрами: вместимость по весу и объему)
 *  и класс, определяющий груз (с двумя параметрами: вес и объем), оба класса имеют метод print()
 *  для вывода значений атрибутов на консоль.
 *
 *  Напишите ОДИН шаблонный класс, который расширял бы свойства объекта атрибутом «название» и
 *  добавлял бы в логику печати на консоль вывод этого названия. С помощью этого шаблонного класса
 *  надо создать объекты типа «машина с названием» и «груз с названием» и вывести их на печать.
 *
 *  #### Задание №6*:
 *  Есть граф дорог, состоящий из 4-х перекрестков и дорог между ними всеми разной длины.
 *
 *  Создайте объект для хранения любого графа дорог, добавьте туда 4 перекрёстка и дороги
 *  между ними какой-нибудь длины, напишите функцию расчета суммарной длины все дорог графа.
 *
 *  #### Задание №7*:
 *  Есть граф дорог, состоящий из 4-х перекрестков и дорог между ними всеми разной длины.
 *
 *  Создайте объект для хранения любого графа дорог, добавьте туда 4 перекрёстка и
 *  дороги между ними какой-нибудь длины, напишите функцию расчета кратчайшего пути
 *  между всеми точками графа начиная с указанной.
 *
 */

#ifndef CARS_H
#define CARS_H

#include <ostream>

namespace ils {

/*!
 * \brief Car интерфейсный класс автомобиля. Все автомобил
 * должны быть потомками этого класса.
 */
class Car
{
public:
    virtual ~Car();

    /*!
     * \brief print метод печати параметров автомобиля.
     * Все наследники должны уметь распечатывать информациою о себе.
     */
    virtual  void print() const = 0;
};

/*!
 * \brief CarWeight класс автомобиля с грузоподъёмностью.
 *
 * Такие автомобили могут перевозить груз ограниченный
 * по весу, но неограниченный по объёму.
 */
class CarWeight : public Car
{
protected:
    int _weight; //!< Максимальный вес груза, который может перевезти автомобиль.

public:
    /*!
     * \brief CarWeight конструктор автмобиля с ограниченной
     * грузоподъёмностью.
     * \param weight автомобили с грузоподъёмностью дожны принимать
     * максимальный вес груза при создании экземпляра.
     */
    CarWeight (int weight);

    /*!
     * \brief weight метод получения грузоподъёмности.
     * \return значение максимального груза в у.е.
     */
    int weight() const;

    /*!
     * \brief operator == сравнение автомобилей по грузоподъёмности.
     * \param other второй автомобиль для сравнения.
     * \return true если автомобили имеют одинаковую грузоподъёмность.
     */
    bool operator == (const CarWeight &other) const;

    /*!
     * \brief operator ++ увеличивает грузоподъёмность автомобиля на одну у.е.
     * \return ссылка на автомобиль с новой грузоподъёмностью.
     */
    CarWeight &operator ++ ();

    /*!
     * \brief print реализация метода печати параметров.
     */
    void print() const override;
};

/*!
 * \brief CarWeightAndVolume класс автомобиля с грузоподъёмностью и объёмом.
 *
 * Такие автомобили могут перевозить груз ограниченный по весу и объёму.
 */
class CarWeightAndVolume : public CarWeight
{
    int _volume; //!< Максимальный объём, который поместится в автомобиль.

public:
    /*!
     * \brief CarWeightAndVolume конструктор автмобиля с ограниченной
     * грузоподъёмностью и вместительностью.
     * \param weight автомобили с грузоподъёмностью дожны принимать
     * вес максимального груза при создании экземпляра.
     * \param volume автомобили с ограиченной вместимостью дожны принимать
     * максимальный объём груза при создании экземпляра.
     */
    CarWeightAndVolume(int weight, int volume);

    /*!
     * \brief volume метод получения максимального объёма.
     * \return максимальный объём в у.е.
     */
    int volume() const;

    /*!
     * \brief operator == сравнение автомобилей по грузоподъёмности и вместительности.
     * \param other второй автомобиль для сравнения.
     * \return true если автомобили имеют одинаковую грузоподъёмность и вместительность.
     */
    bool operator == (const CarWeightAndVolume &other) const;

    /*!
     * \brief operator ++ увеличивает грузоподъёмность и вместительность автомобиля на одну у.е.
     * \return ссылка на автомобиль с новыми параметрами.
     */
    CarWeight &operator ++ ();

    /*!
     * \brief print реализация метода печати параметров.
     */
    void print() const override;
};

} // namespace ils

#endif // CARS_H

